// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value ofthis location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // for instruction 
    // instruction[15] -> 1 is C(Comp), 0 is A(Address) 
    Not(in=instruction[15], out=IsA);
    Not(in=IsA, out=IsC);


    // 111 a ccccc ddd jjj
    // 12 ->select Memory
    And(a=IsC, b=instruction[12], out=Mux16ASel, out=isMem); 
    // opcode ccccc
    And(a=IsC, b=instruction[6], out=NegateOut);
    And(a=IsC, b=instruction[7], out=AddOrAnd);
    And(a=IsC, b=instruction[8], out=NegateYIn);
    And(a=IsC, b=instruction[9], out=ZeroYIn);
    And(a=IsC, b=instruction[10], out=NegateXIn);
    And(a=IsC, b=instruction[11], out=ZeroXIn);

    // dest ddd 
    And(a=IsC, b=instruction[3], out=writeM); // write into RAM
    And(a=IsC, b=instruction[4], out=LoadDR);
    And(a=IsC, b=instruction[5], out=LoadAR);
    
    // jump jjj
    And(a=IsC, b=instruction[0], out=);
    And(a=IsC, b=instruction[1], out=);
    And(a=IsC, b=instruction[2], out=);

    // A -> address 
    


    ALU(x=DRegOut, y=Mux16BOut, 
        zx=ZeroXIn, nx=NegateXIn, zy=ZeroYIn, ny=NegateYIn, f=AddOrAnd, no=NegateOut,
        out=outM, out=ALUOutput,
        zr=OutEQZero, ng=OutLTZero );

    // D Register
    Register(in=ALUOutput, load=LoadDR
              out=DRegOut );
    // A Register
    Register(in=Mux16AOut, load=LoadAR
              out=ARegOut, out=addressM);
    
    // ALU input
    Mux16(a=ALUOutput, b=instruction, sel=Mux16ASel 
            out=Mux16AOut );
    // CMP input
    Mux16(a=ARegOut, b=inM, sel=Mux16BSel 
            out=Mux16BOut );
    
    PC(in=ARegOut, load=PCLoad, inc=true, reset=reset 
        out=pc );

}
